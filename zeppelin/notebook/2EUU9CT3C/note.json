{
  "paragraphs": [
    {
      "text": "%md\n###  Example taken from \"Graph Algorithms: Practical Examples in Apache Spark and Neo4j\" (https://neo4j.com/graph-algorithms-book/)\n\n### Please make sure that you have previously executed [this notebook](/#/notebook/2EXB3TVAE)\n",
      "user": "anonymous",
      "dateUpdated": "2020-01-19 17:28:47.646",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eExample taken from \u0026ldquo;Graph Algorithms: Practical Examples in Apache Spark and Neo4j\u0026rdquo; (\u003ca href\u003d\"https://neo4j.com/graph-algorithms-book/\"\u003ehttps://neo4j.com/graph-algorithms-book/\u003c/a\u003e)\u003c/h3\u003e\n\u003ch3\u003ePlease make sure that you have previously executed \u003ca href\u003d\"/#/notebook/2EXB3TVAE\"\u003ethis notebook\u003c/a\u003e\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1577984647930_-1717131299",
      "id": "20200102-170407_1162937078",
      "dateCreated": "2020-01-02 17:04:07.930",
      "dateStarted": "2020-01-19 17:28:47.646",
      "dateFinished": "2020-01-19 17:28:47.657",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# The Triangle Counting / Clustering Coefficient algorithm migration guide\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 20:15:37.406",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eThe Triangle Counting / Clustering Coefficient algorithm migration guide\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1577985136428_1822405389",
      "id": "20200102-171216_692196906",
      "dateCreated": "2020-01-02 17:12:16.428",
      "dateStarted": "2020-02-06 20:15:37.406",
      "dateFinished": "2020-02-06 20:15:37.426",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Example graph\n\nWe can visualize the example graph in Zeppelin by using the following cypher statement:",
      "user": "anonymous",
      "dateUpdated": "2020-02-08 21:42:38.519",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eExample graph\u003c/h3\u003e\n\u003cp\u003eWe can visualize the example graph in Zeppelin by using the following cypher statement:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581198155902_1714240041",
      "id": "20200208-214235_205327633",
      "dateCreated": "2020-02-08 21:42:35.902",
      "dateStarted": "2020-02-08 21:42:38.518",
      "dateFinished": "2020-02-08 21:42:38.528",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_algo\nMATCH p\u003d(:Library)-[:DEPENDS_ON]-\u003e(:Library)\nRETURN p;",
      "user": "anonymous",
      "dateUpdated": "2020-02-08 21:50:03.714",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "network": {
                  "properties": {
                    "Library": {
                      "selected": "id",
                      "keys": [
                        "id",
                        "label"
                      ]
                    }
                  },
                  "d3Graph": {
                    "forceLayout": {
                      "timeout": 10000.0,
                      "charge": -120.0,
                      "linkDistance": 80.0
                    },
                    "zoom": {
                      "minScale": 1.3
                    }
                  }
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "editOnDblClick": false,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":0,\"data\":{\"partition\":0,\"id\":\"six\",\"writeValue\":0,\"communities\":[6,6]},\"label\":\"Library\"},{\"id\":1,\"data\":{\"partition\":1,\"id\":\"pandas\",\"writeValue\":0,\"communities\":[6,6]},\"label\":\"Library\"},{\"id\":2,\"data\":{\"partition\":2,\"id\":\"numpy\",\"writeValue\":2,\"communities\":[6,6]},\"label\":\"Library\"},{\"id\":3,\"data\":{\"partition\":3,\"id\":\"python-dateutil\",\"writeValue\":0,\"communities\":[6,6]},\"label\":\"Library\"},{\"id\":4,\"data\":{\"partition\":4,\"id\":\"pytz\",\"writeValue\":4,\"communities\":[6,6]},\"label\":\"Library\"},{\"id\":5,\"data\":{\"partition\":5,\"id\":\"pyspark\",\"writeValue\":8,\"communities\":[8,8]},\"label\":\"Library\"},{\"id\":6,\"data\":{\"partition\":6,\"id\":\"matplotlib\",\"writeValue\":0,\"communities\":[6,6]},\"label\":\"Library\"},{\"id\":7,\"data\":{\"partition\":7,\"id\":\"spacy\",\"writeValue\":0,\"communities\":[6,6]},\"label\":\"Library\"},{\"id\":8,\"data\":{\"partition\":8,\"id\":\"py4j\",\"writeValue\":8,\"communities\":[8,8]},\"label\":\"Library\"},{\"id\":9,\"data\":{\"partition\":9,\"id\":\"jupyter\",\"writeValue\":12,\"communities\":[12,14]},\"label\":\"Library\"},{\"id\":10,\"data\":{\"partition\":10,\"id\":\"jpy-console\",\"writeValue\":12,\"communities\":[12,14]},\"label\":\"Library\"},{\"id\":11,\"data\":{\"partition\":11,\"id\":\"nbconvert\",\"writeValue\":14,\"communities\":[14,14]},\"label\":\"Library\"},{\"id\":12,\"data\":{\"partition\":12,\"id\":\"ipykernel\",\"writeValue\":12,\"communities\":[12,14]},\"label\":\"Library\"},{\"id\":13,\"data\":{\"partition\":13,\"id\":\"jpy-client\",\"writeValue\":14,\"communities\":[14,14]},\"label\":\"Library\"},{\"id\":14,\"data\":{\"partition\":14,\"id\":\"jpy-core\",\"writeValue\":14,\"communities\":[14,14]},\"label\":\"Library\"}],\"edges\":[{\"source\":1,\"target\":2,\"id\":0,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":1,\"target\":4,\"id\":1,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":1,\"target\":3,\"id\":2,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":3,\"target\":0,\"id\":3,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":5,\"target\":8,\"id\":4,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":6,\"target\":2,\"id\":5,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":6,\"target\":3,\"id\":6,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":6,\"target\":0,\"id\":7,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":6,\"target\":4,\"id\":8,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":7,\"target\":0,\"id\":9,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":7,\"target\":2,\"id\":10,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":9,\"target\":11,\"id\":11,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":9,\"target\":12,\"id\":12,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":9,\"target\":10,\"id\":13,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":10,\"target\":13,\"id\":14,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":10,\"target\":12,\"id\":15,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":13,\"target\":14,\"id\":16,\"data\":{},\"label\":\"DEPENDS_ON\"},{\"source\":11,\"target\":14,\"id\":17,\"data\":{},\"label\":\"DEPENDS_ON\"}],\"labels\":{\"Library\":\"#3D4308\",\"Place\":\"#FDF8A5\",\"User\":\"#7F5158\"},\"types\":[\"EROAD\",\"FOLLOWS\",\"DEPENDS_ON\"],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1579454940549_-1481074567",
      "id": "20200119-172900_1269702725",
      "dateCreated": "2020-01-19 17:29:00.549",
      "dateStarted": "2020-02-08 21:42:48.189",
      "dateFinished": "2020-02-08 21:42:48.233",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Neo4j graph algorithms library",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 20:16:27.217",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eNeo4j graph algorithms library\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581020175131_-1350271427",
      "id": "20200206-201615_26677124",
      "dateCreated": "2020-02-06 20:16:15.131",
      "dateStarted": "2020-02-06 20:16:27.218",
      "dateFinished": "2020-02-06 20:16:27.223",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Stream local clustering coefficient\n\nThe syntax we have had in graph algorithms library was `algo.triangleCount.stream(\u0027Node label\u0027, \u0027Relationship type\u0027, {configuration map})`.",
      "user": "anonymous",
      "dateUpdated": "2020-02-08 21:43:42.787",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eStream local clustering coefficient\u003c/h2\u003e\n\u003cp\u003eThe syntax we have had in graph algorithms library was \u003ccode\u003ealgo.triangleCount.stream(\u0026#39;Node label\u0026#39;, \u0026#39;Relationship type\u0026#39;, {configuration map})\u003c/code\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1575719928127_1429386788",
      "id": "20191207-114641_1084520692",
      "dateCreated": "2019-12-07 11:58:48.127",
      "dateStarted": "2020-02-08 21:43:10.814",
      "dateFinished": "2020-02-08 21:43:10.835",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_algo\nCALL algo.triangleCount.stream(\u0027Library\u0027, \u0027DEPENDS_ON\u0027)\nYIELD nodeId, triangles, coefficient\nWHERE coefficient \u003e 0\nRETURN algo.getNodeById(nodeId).id AS library, coefficient\nORDER BY coefficient DESC;\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-08 21:50:00.910",
      "config": {
        "editorSetting": {
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "library": "string",
                      "coefficient": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "library\tcoefficient\n\"ipykernel\"\t1.0\n\"six\"\t0.3333333333333333\n\"python-dateutil\"\t0.3333333333333333\n\"jupyter\"\t0.3333333333333333\n\"jpy-console\"\t0.3333333333333333\n\"matplotlib\"\t0.16666666666666666\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1575719928128_267124165",
      "id": "20191207-114720_18204489",
      "dateCreated": "2019-12-07 11:58:48.128",
      "dateStarted": "2020-02-06 20:16:02.248",
      "dateFinished": "2020-02-06 20:16:02.369",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nipykernel has a score of 1, which means that all ipykernel’s neighbors are neighbors of\neach other. This tells us that the community directly around ipykernel is very cohesive.\n\nWe’ve filtered out nodes with a coefficient score of 0 in this code sample, but nodes\nwith low coefficients may also be interesting. A low score can be an indicator that a\nnode is a structural hole—a node that is well connected to nodes in different com‐\nmunities that aren’t otherwise connected to each other.",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 20:16:07.867",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eipykernel has a score of 1, which means that all ipykernel’s neighbors are neighbors of\u003cbr/\u003eeach other. This tells us that the community directly around ipykernel is very cohesive.\u003c/p\u003e\n\u003cp\u003eWe’ve filtered out nodes with a coefficient score of 0 in this code sample, but nodes\u003cbr/\u003ewith low coefficients may also be interesting. A low score can be an indicator that a\u003cbr/\u003enode is a structural hole—a node that is well connected to nodes in different com‐\u003cbr/\u003emunities that aren’t otherwise connected to each other.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1580237704460_1976508902",
      "id": "20200128-185504_317342572",
      "dateCreated": "2020-01-28 18:55:04.460",
      "dateStarted": "2020-02-06 20:16:07.870",
      "dateFinished": "2020-02-06 20:16:07.884",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Stream triangles\n\nThe syntax we have had in graph algorithms library was `algo.triangle.stream(\u0027Node label\u0027, \u0027Relationship type\u0027, {configuration map})`.",
      "user": "anonymous",
      "dateUpdated": "2020-02-08 21:44:05.151",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eStream triangles\u003c/h2\u003e\n\u003cp\u003eThe syntax we have had in graph algorithms library was \u003ccode\u003ealgo.triangle.stream(\u0026#39;Node label\u0026#39;, \u0026#39;Relationship type\u0026#39;, {configuration map})\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1575719928129_1541559103",
      "id": "20191207-114843_887180679",
      "dateCreated": "2019-12-07 11:58:48.129",
      "dateStarted": "2020-02-08 21:44:05.151",
      "dateFinished": "2020-02-08 21:44:05.165",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_algo\nCALL algo.triangle.stream(\"Library\",\"DEPENDS_ON\")\nYIELD nodeA, nodeB, nodeC\nRETURN algo.getNodeById(nodeA).id AS nodeA,\n       algo.getNodeById(nodeB).id AS nodeB,\n       algo.getNodeById(nodeC).id AS nodeC;\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-08 21:49:55.543",
      "config": {
        "editorSetting": {
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "nodeA": "string",
                      "nodeB": "string",
                      "nodeC": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "nodeA\tnodeB\tnodeC\n\"six\"\t\"python-dateutil\"\t\"matplotlib\"\n\"jupyter\"\t\"jpy-console\"\t\"ipykernel\"\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1575719928129_1527464832",
      "id": "20191207-114728_61427870",
      "dateCreated": "2019-12-07 11:58:48.130",
      "dateStarted": "2020-02-08 21:44:10.646",
      "dateFinished": "2020-02-08 21:44:10.715",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nWe see the same six libraries as we did before, but now we know how they’re connec‐\nted. matplotlib, six, and python-dateutil form one triangle. jupyter, jpy-console, and\nipykernel form the other.\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-08 21:49:07.743",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eWe see the same six libraries as we did before, but now we know how they’re connec‐\u003cbr/\u003eted. matplotlib, six, and python-dateutil form one triangle. jupyter, jpy-console, and\u003cbr/\u003eipykernel form the other.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581198542773_935762340",
      "id": "20200208-214902_1565164090",
      "dateCreated": "2020-02-08 21:49:02.773",
      "dateStarted": "2020-02-08 21:49:07.750",
      "dateFinished": "2020-02-08 21:49:07.781",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Neo4j graph data science library",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 20:17:09.352",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eNeo4j graph data science library\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1575719928130_-1785173192",
      "id": "20191207-114958_2002234398",
      "dateCreated": "2019-12-07 11:58:48.130",
      "dateStarted": "2020-02-06 20:17:09.352",
      "dateFinished": "2020-02-06 20:17:09.383",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThe recommended way to use the GDS library is using the named graphs, where we first load the graph in memory and then proceed to run algorithms on it.\n\nThe syntax for creating named graphs is `CALL gds.graph.create(in-memory graph name, node label, relationship type)`.\n\nWe need to project an undirected network, as the triangle and clustering coefficient algorithms only work on an undirected network.",
      "user": "anonymous",
      "dateUpdated": "2020-02-08 21:46:32.104",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThe recommended way to use the GDS library is using the named graphs, where we first load the graph in memory and then proceed to run algorithms on it.\u003c/p\u003e\n\u003cp\u003eThe syntax for creating named graphs is \u003ccode\u003eCALL gds.graph.create(in-memory graph name, node label, relationship type)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWe need to project an undirected network, as the triangle and clustering coefficient algorithms only work on an undirected network.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581020229326_-1100161539",
      "id": "20200206-201709_1894542974",
      "dateCreated": "2020-02-06 20:17:09.326",
      "dateStarted": "2020-02-08 21:46:32.104",
      "dateFinished": "2020-02-08 21:46:32.127",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_gds\nCALL gds.graph.create(\u0027triangles_example\u0027, \u0027Library\u0027, \n  {DEPENDS_ON: {type: \u0027DEPENDS_ON\u0027, orientation: \u0027UNDIRECTED\u0027}});\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-21 17:08:33.413",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "graphName": "string",
                      "nodeProjection.Library.label": "string",
                      "relationshipProjection.DEPENDS_ON.orientation": "string",
                      "relationshipProjection.DEPENDS_ON.aggregation": "string",
                      "relationshipProjection.DEPENDS_ON.type": "string",
                      "nodeCount": "string",
                      "relationshipCount": "string",
                      "createMillis": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "graphName\tnodeProjection.Library.label\trelationshipProjection.DEPENDS_ON.orientation\trelationshipProjection.DEPENDS_ON.aggregation\trelationshipProjection.DEPENDS_ON.type\tnodeCount\trelationshipCount\tcreateMillis\n\"triangles_example\"\tLibrary\tUNDIRECTED\tDEFAULT\tDEPENDS_ON\t15\t36\t45\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581020241808_-2125972906",
      "id": "20200206-201721_957232939",
      "dateCreated": "2020-02-06 20:17:21.808",
      "dateStarted": "2020-02-21 17:08:33.104",
      "dateFinished": "2020-02-21 17:08:33.174",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Stream local clustering coefficient\nIf we want to run the clustering coefficient on the whole in-memory named graph, we don\u0027t have to specify any additional configuration. Other than that, the syntax is similar to that of the Graph algorithms library.",
      "user": "anonymous",
      "dateUpdated": "2020-02-08 21:48:21.871",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eStream local clustering coefficient\u003c/h2\u003e\n\u003cp\u003eIf we want to run the clustering coefficient on the whole in-memory named graph, we don\u0026rsquo;t have to specify any additional configuration. Other than that, the syntax is similar to that of the Graph algorithms library.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581020273714_-2116779115",
      "id": "20200206-201753_451434961",
      "dateCreated": "2020-02-06 20:17:53.714",
      "dateStarted": "2020-02-08 21:48:21.878",
      "dateFinished": "2020-02-08 21:48:21.909",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_gds\nCALL gds.alpha.triangleCount.stream(\u0027triangles_example\u0027)\nYIELD nodeId, triangles, coefficient\nWHERE coefficient \u003e 0\nRETURN gds.util.asNode(nodeId).id AS library, coefficient\nORDER BY coefficient DESC;",
      "user": "anonymous",
      "dateUpdated": "2020-02-21 17:08:36.052",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "library": "string",
                      "coefficient": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "library\tcoefficient\n\"ipykernel\"\t1.0\n\"six\"\t0.3333333333333333\n\"python-dateutil\"\t0.3333333333333333\n\"jupyter\"\t0.3333333333333333\n\"jpy-console\"\t0.3333333333333333\n\"matplotlib\"\t0.16666666666666666\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581020471477_-608227820",
      "id": "20200206-202111_2074686534",
      "dateCreated": "2020-02-06 20:21:11.477",
      "dateStarted": "2020-02-21 17:08:36.080",
      "dateFinished": "2020-02-21 17:08:36.174",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Stream triangles\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-08 21:49:22.823",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eStream triangles\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581020741263_193206240",
      "id": "20200206-202541_1386887436",
      "dateCreated": "2020-02-06 20:25:41.263",
      "dateStarted": "2020-02-08 21:49:22.823",
      "dateFinished": "2020-02-08 21:49:22.865",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_gds\nCALL gds.alpha.triangle.stream(\u0027triangles_example\u0027)\nYIELD nodeA, nodeB, nodeC\nRETURN gds.util.asNode(nodeA).id AS nodeA,\n       gds.util.asNode(nodeB).id AS nodeB,\n       gds.util.asNode(nodeC).id AS nodeC;",
      "user": "anonymous",
      "dateUpdated": "2020-02-21 17:08:39.140",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "nodeA": "string",
                      "nodeB": "string",
                      "nodeC": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "nodeA\tnodeB\tnodeC\n\"six\"\t\"python-dateutil\"\t\"matplotlib\"\n\"jupyter\"\t\"jpy-console\"\t\"ipykernel\"\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581020315993_-1614280191",
      "id": "20200206-201835_844765800",
      "dateCreated": "2020-02-06 20:18:35.993",
      "dateStarted": "2020-02-21 17:08:39.164",
      "dateFinished": "2020-02-21 17:08:39.217",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nAfter we are done with our analyisis we release the graph from memory",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 20:24:42.331",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eAfter we are done with our analyisis we release the graph from memory\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581020380065_1182111588",
      "id": "20200206-201940_284092513",
      "dateCreated": "2020-02-06 20:19:40.065",
      "dateStarted": "2020-02-06 20:24:42.331",
      "dateFinished": "2020-02-06 20:24:42.344",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_gds\nCALL gds.graph.drop(\u0027triangles_example\u0027);",
      "user": "anonymous",
      "dateUpdated": "2020-02-21 17:08:42.078",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "graphName": "string",
                      "nodeProjection.Library.label": "string",
                      "relationshipProjection.DEPENDS_ON.orientation": "string",
                      "relationshipProjection.DEPENDS_ON.aggregation": "string",
                      "relationshipProjection.DEPENDS_ON.type": "string",
                      "nodeQuery": "string",
                      "relationshipQuery": "string",
                      "nodeCount": "string",
                      "relationshipCount": "string",
                      "degreeDistribution.p99": "string",
                      "degreeDistribution.min": "string",
                      "degreeDistribution.max": "string",
                      "degreeDistribution.mean": "string",
                      "degreeDistribution.p90": "string",
                      "degreeDistribution.p50": "string",
                      "degreeDistribution.p999": "string",
                      "degreeDistribution.p95": "string",
                      "degreeDistribution.p75": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "graphName\tnodeProjection.Library.label\trelationshipProjection.DEPENDS_ON.orientation\trelationshipProjection.DEPENDS_ON.aggregation\trelationshipProjection.DEPENDS_ON.type\tnodeQuery\trelationshipQuery\tnodeCount\trelationshipCount\tdegreeDistribution.p99\tdegreeDistribution.min\tdegreeDistribution.max\tdegreeDistribution.mean\tdegreeDistribution.p90\tdegreeDistribution.p50\tdegreeDistribution.p999\tdegreeDistribution.p95\tdegreeDistribution.p75\n\"triangles_example\"\tLibrary\tUNDIRECTED\tDEFAULT\tDEPENDS_ON\tNULL\tNULL\t15\t36\t4\t1\t4\t2.4\t3\t2\t4\t3\t3\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581020682312_285705812",
      "id": "20200206-202442_2064942637",
      "dateCreated": "2020-02-06 20:24:42.312",
      "dateStarted": "2020-02-21 17:08:41.724",
      "dateFinished": "2020-02-21 17:08:41.751",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_gdn\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 20:24:54.520",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581020694518_-1264840463",
      "id": "20200206-202454_104987537",
      "dateCreated": "2020-02-06 20:24:54.518",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Community detection/Triangles/Neo4j",
  "id": "2EUU9CT3C",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "neo4j_algo:shared_process": [],
    "md:shared_process": [],
    "neo4j_gds:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}