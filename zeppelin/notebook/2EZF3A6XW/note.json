{
  "paragraphs": [
    {
      "text": "%md\n# (Weakly) Connected components\n\nThe Connected Components algorithm (sometimes called Union Find or Weakly\nConnected Components) finds sets of connected nodes in an undirected graph where\neach node is reachable from any other node in the same set.",
      "user": "anonymous",
      "dateUpdated": "2020-01-28 12:31:18.447",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003e(Weakly) Connected components\u003c/h1\u003e\n\u003cp\u003eThe Connected Components algorithm (sometimes called Union Find or Weakly\u003cbr/\u003eConnected Components) finds sets of connected nodes in an undirected graph where\u003cbr/\u003eeach node is reachable from any other node in the same set.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1580214627788_-1673602617",
      "id": "20200128-082446_626593832",
      "dateCreated": "2020-01-28 12:30:27.789",
      "dateStarted": "2020-01-28 12:31:18.447",
      "dateFinished": "2020-01-28 12:31:18.474",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n# When you can use it?\n\nConnected Components is often used early in an analysis to understand\na graph’s structure. Because it scales efficiently, consider this algorithm for graphs\nrequiring frequent updates. It can quickly show new nodes in common between\ngroups, which is useful for analysis such as fraud detection.\n\nExample use cases include:\n\n- Keeping track of clusters of database records, as part of the deduplication pro‐\ncess\n- Analyzing citation networks",
      "user": "anonymous",
      "dateUpdated": "2020-01-28 12:32:08.621",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eWhen you can use it?\u003c/h1\u003e\n\u003cp\u003eConnected Components is often used early in an analysis to understand\u003cbr/\u003ea graph’s structure. Because it scales efficiently, consider this algorithm for graphs\u003cbr/\u003erequiring frequent updates. It can quickly show new nodes in common between\u003cbr/\u003egroups, which is useful for analysis such as fraud detection.\u003c/p\u003e\n\u003cp\u003eExample use cases include:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eKeeping track of clusters of database records, as part of the deduplication pro‐\u003cbr/\u003ecess\u003c/li\u003e\n  \u003cli\u003eAnalyzing citation networks\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1580214627790_1249466895",
      "id": "20200128-082518_341828040",
      "dateCreated": "2020-01-28 12:30:27.790",
      "dateStarted": "2020-01-28 12:32:08.621",
      "dateFinished": "2020-01-28 12:32:08.643",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nYou can find the algorithm implemented in:\n\n* [Neo4j](/#/notebook/2EU4ZXFE3)\n* [Spark](/#/notebook/2EXTYPK53)",
      "user": "anonymous",
      "dateUpdated": "2020-01-28 12:32:55.733",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eYou can find the algorithm implemented in:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ca href\u003d\"/#/notebook/2EU4ZXFE3\"\u003eNeo4j\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href\u003d\"/#/notebook/2EXTYPK53\"\u003eSpark\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1580214627791_-1096780229",
      "id": "20200128-082521_853675343",
      "dateCreated": "2020-01-28 12:30:27.791",
      "dateStarted": "2020-01-28 12:32:55.733",
      "dateFinished": "2020-01-28 12:32:55.774",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2020-01-28 12:30:27.793",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1580214627793_-803436794",
      "id": "20200128-083003_347629143",
      "dateCreated": "2020-01-28 12:30:27.793",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Community detection/Connected components/Connected components",
  "id": "2EZF3A6XW",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "neo4j:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}