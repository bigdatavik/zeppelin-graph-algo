{
  "paragraphs": [
    {
      "text": "%md\n\n###  Example taken from \"Graph Algorithms: Practical Examples in Apache Spark and Neo4j\" (https://neo4j.com/graph-algorithms-book/)\n\n### Please make sure that you have previously executed [this notebook](/#/notebook/2EWCD4Q9X)",
      "user": "anonymous",
      "dateUpdated": "2020-01-19 18:47:11.514",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eExample taken from \u0026ldquo;Graph Algorithms: Practical Examples in Apache Spark and Neo4j\u0026rdquo; (\u003ca href\u003d\"https://neo4j.com/graph-algorithms-book/\"\u003ehttps://neo4j.com/graph-algorithms-book/\u003c/a\u003e)\u003c/h3\u003e\n\u003ch3\u003ePlease make sure that you have previously executed \u003ca href\u003d\"/#/notebook/2EWCD4Q9X\"\u003ethis notebook\u003c/a\u003e\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1579459627317_-497502567",
      "id": "20200119-184707_1818221447",
      "dateCreated": "2020-01-19 18:47:07.317",
      "dateStarted": "2020-01-19 18:47:11.514",
      "dateFinished": "2020-01-19 18:47:11.540",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# Breadth-first search",
      "user": "anonymous",
      "dateUpdated": "2020-01-19 18:47:37.604",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eBreadth-first search\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1579459650488_-181624289",
      "id": "20200119-184730_1950362542",
      "dateCreated": "2020-01-19 18:47:30.488",
      "dateStarted": "2020-01-19 18:47:37.605",
      "dateFinished": "2020-01-19 18:47:37.627",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Import graph",
      "user": "anonymous",
      "dateUpdated": "2020-01-28 18:14:31.585",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eImport graph\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1580235267866_1472323192",
      "id": "20200128-181427_1545156820",
      "dateCreated": "2020-01-28 18:14:27.866",
      "dateStarted": "2020-01-28 18:14:31.594",
      "dateFinished": "2020-01-28 18:14:31.609",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ng \u003d create_transport_graph()\n",
      "user": "anonymous",
      "dateUpdated": "2020-01-28 17:44:29.157",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            "http://172.27.0.3:4040/jobs/job?id\u003d24"
          ],
          "interpreterSettingId": "spark"
        }
      },
      "apps": [],
      "jobName": "paragraph_1577905916298_115020128",
      "id": "20200101-190753_129637672",
      "dateCreated": "2020-01-01 19:11:56.298",
      "dateStarted": "2020-01-28 17:44:29.218",
      "dateFinished": "2020-01-28 17:44:29.517",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Find medium-sized cities (100k to 300k population)\n\nSpark’s implementation of the Breadth First Search algorithm finds the shortest path\nbetween two nodes by the number of relationships (i.e., hops) between them. You can\nexplicitly name your target node or add criteria to be met.\n\nFor example, we can use the bfs function to find the first medium-sized (by Euro‐\npean standards) city that has a population of between 100,000 and 300,000 people.\nLet’s first check which places have a population matching those criteria:",
      "user": "anonymous",
      "dateUpdated": "2020-01-28 17:46:24.338",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eFind medium-sized cities (100k to 300k population)\u003c/h3\u003e\n\u003cp\u003eSpark’s implementation of the Breadth First Search algorithm finds the shortest path\u003cbr/\u003ebetween two nodes by the number of relationships (i.e., hops) between them. You can\u003cbr/\u003eexplicitly name your target node or add criteria to be met.\u003c/p\u003e\n\u003cp\u003eFor example, we can use the bfs function to find the first medium-sized (by Euro‐\u003cbr/\u003epean standards) city that has a population of between 100,000 and 300,000 people.\u003cbr/\u003eLet’s first check which places have a population matching those criteria:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1579546321802_1389356578",
      "id": "20200120-185201_2046203492",
      "dateCreated": "2020-01-20 18:52:01.802",
      "dateStarted": "2020-01-28 17:46:24.341",
      "dateFinished": "2020-01-28 17:46:24.362",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n(g.vertices\n .filter(\"population \u003e 100000 and population \u003c 300000\")\n .sort(\"population\")\n .show())\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-01-28 17:44:33.045",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----------+--------+---------+----------+\n|        id|latitude|longitude|population|\n+----------+--------+---------+----------+\n|Colchester|51.88921|  0.90421|    104390|\n|   Ipswich|52.05917|  1.15545|    133384|\n+----------+--------+---------+----------+\n\n"
          }
        ]
      },
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            "http://172.27.0.3:4040/jobs/job?id\u003d25"
          ],
          "interpreterSettingId": "spark"
        }
      },
      "apps": [],
      "jobName": "paragraph_1577905916299_1940372002",
      "id": "20200101-190812_321541252",
      "dateCreated": "2020-01-01 19:11:56.299",
      "dateStarted": "2020-01-28 17:44:33.077",
      "dateFinished": "2020-01-28 17:44:33.336",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\n### Find the shortest path from Haag to a medium-sized city\n\nThe following code finds the shortest path from Den Haag to a medium-sized city:",
      "user": "anonymous",
      "dateUpdated": "2020-01-28 17:46:50.336",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eFind the shortest path from Haag to a medium-sized city\u003c/h3\u003e\n\u003cp\u003eThe following code finds the shortest path from Den Haag to a medium-sized city:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1579546385540_1009477795",
      "id": "20200120-185305_1775187524",
      "dateCreated": "2020-01-20 18:53:05.540",
      "dateStarted": "2020-01-28 17:46:50.335",
      "dateFinished": "2020-01-28 17:46:50.374",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom_expr \u003d \"id\u003d\u0027Den Haag\u0027\"\nto_expr \u003d \"population \u003e 100000 and population \u003c 300000 and id \u003c\u003e \u0027Den Haag\u0027\"\nresult \u003d g.bfs(from_expr, to_expr)\nprint(result.columns)",
      "user": "anonymous",
      "dateUpdated": "2020-01-28 17:44:36.267",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[\u0027from\u0027, \u0027e0\u0027, \u0027v1\u0027, \u0027e1\u0027, \u0027v2\u0027, \u0027e2\u0027, \u0027to\u0027]\n"
          }
        ]
      },
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            "http://172.27.0.3:4040/jobs/job?id\u003d26",
            "http://172.27.0.3:4040/jobs/job?id\u003d27",
            "http://172.27.0.3:4040/jobs/job?id\u003d28",
            "http://172.27.0.3:4040/jobs/job?id\u003d29",
            "http://172.27.0.3:4040/jobs/job?id\u003d30",
            "http://172.27.0.3:4040/jobs/job?id\u003d31",
            "http://172.27.0.3:4040/jobs/job?id\u003d32",
            "http://172.27.0.3:4040/jobs/job?id\u003d33",
            "http://172.27.0.3:4040/jobs/job?id\u003d34",
            "http://172.27.0.3:4040/jobs/job?id\u003d35",
            "http://172.27.0.3:4040/jobs/job?id\u003d36",
            "http://172.27.0.3:4040/jobs/job?id\u003d37",
            "http://172.27.0.3:4040/jobs/job?id\u003d38",
            "http://172.27.0.3:4040/jobs/job?id\u003d39",
            "http://172.27.0.3:4040/jobs/job?id\u003d40",
            "http://172.27.0.3:4040/jobs/job?id\u003d41",
            "http://172.27.0.3:4040/jobs/job?id\u003d42",
            "http://172.27.0.3:4040/jobs/job?id\u003d43",
            "http://172.27.0.3:4040/jobs/job?id\u003d44",
            "http://172.27.0.3:4040/jobs/job?id\u003d45",
            "http://172.27.0.3:4040/jobs/job?id\u003d46",
            "http://172.27.0.3:4040/jobs/job?id\u003d47",
            "http://172.27.0.3:4040/jobs/job?id\u003d48",
            "http://172.27.0.3:4040/jobs/job?id\u003d49",
            "http://172.27.0.3:4040/jobs/job?id\u003d50"
          ],
          "interpreterSettingId": "spark"
        }
      },
      "apps": [],
      "jobName": "paragraph_1577905916300_105970424",
      "id": "20200101-191027_1999772571",
      "dateCreated": "2020-01-01 19:11:56.300",
      "dateStarted": "2020-01-28 17:44:36.339",
      "dateFinished": "2020-01-28 17:44:46.317",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\n### Filter out relationships, keep only nodes\n\nColumns beginning with e represent relationships (edges) and columns beginning\nwith v represent nodes (vertices). We’re only interested in the nodes, so let’s filter out\nany columns that begin with e from the resulting DataFrame:",
      "user": "anonymous",
      "dateUpdated": "2020-01-28 17:47:18.630",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eFilter out relationships, keep only nodes\u003c/h3\u003e\n\u003cp\u003eColumns beginning with e represent relationships (edges) and columns beginning\u003cbr/\u003ewith v represent nodes (vertices). We’re only interested in the nodes, so let’s filter out\u003cbr/\u003eany columns that begin with e from the resulting DataFrame:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1579546554236_707814191",
      "id": "20200120-185554_1313925655",
      "dateCreated": "2020-01-20 18:55:54.237",
      "dateStarted": "2020-01-28 17:47:18.635",
      "dateFinished": "2020-01-28 17:47:18.701",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ncolumns \u003d [column for column in result.columns if not column.startswith(\"e\")]\nresult.select(columns).show()\n",
      "user": "anonymous",
      "dateUpdated": "2020-01-28 17:44:49.341",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+--------------------+--------------------+--------------------+\n|                from|                  v1|                  v2|                  to|\n+--------------------+--------------------+--------------------+--------------------+\n|[Den Haag,52.0786...|[Hoek van Holland...|[Felixstowe,51.96...|[Ipswich,52.05917...|\n+--------------------+--------------------+--------------------+--------------------+\n\n"
          }
        ]
      },
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            "http://172.27.0.3:4040/jobs/job?id\u003d51",
            "http://172.27.0.3:4040/jobs/job?id\u003d52",
            "http://172.27.0.3:4040/jobs/job?id\u003d53",
            "http://172.27.0.3:4040/jobs/job?id\u003d54",
            "http://172.27.0.3:4040/jobs/job?id\u003d55",
            "http://172.27.0.3:4040/jobs/job?id\u003d56",
            "http://172.27.0.3:4040/jobs/job?id\u003d57",
            "http://172.27.0.3:4040/jobs/job?id\u003d58",
            "http://172.27.0.3:4040/jobs/job?id\u003d59"
          ],
          "interpreterSettingId": "spark"
        }
      },
      "apps": [],
      "jobName": "paragraph_1577906023823_-1305197573",
      "id": "20200101-191343_557652051",
      "dateCreated": "2020-01-01 19:13:43.823",
      "dateStarted": "2020-01-28 17:44:49.368",
      "dateFinished": "2020-01-28 17:44:53.487",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2020-01-01 19:13:50.809",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1577906030808_-1567234721",
      "id": "20200101-191350_942770780",
      "dateCreated": "2020-01-01 19:13:50.808",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Path finding/Bfs/Spark",
  "id": "2EYUXH8U3",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}