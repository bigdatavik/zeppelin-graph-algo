{
  "paragraphs": [
    {
      "text": "%md\n\n###  Example taken from \"Graph Algorithms: Practical Examples in Apache Spark and Neo4j\" (https://neo4j.com/graph-algorithms-book/)\n\n### Please make sure that you have previously executed [this notebook](/#/notebook/2EZ4GSKAZ)",
      "user": "anonymous",
      "dateUpdated": "2020-02-20 07:18:04.101",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eExample taken from \u0026ldquo;Graph Algorithms: Practical Examples in Apache Spark and Neo4j\u0026rdquo; (\u003ca href\u003d\"https://neo4j.com/graph-algorithms-book/\"\u003ehttps://neo4j.com/graph-algorithms-book/\u003c/a\u003e)\u003c/h3\u003e\n\u003ch3\u003ePlease make sure that you have previously executed \u003ca href\u003d\"/#/notebook/2EZ4GSKAZ\"\u003ethis notebook\u003c/a\u003e\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582183080103_558935609",
      "id": "20200220-071800_1368262197",
      "dateCreated": "2020-02-20 07:18:00.103",
      "dateStarted": "2020-02-20 07:18:04.118",
      "dateFinished": "2020-02-20 07:18:04.161",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# The Minimum Weight Spanning Tree algorithm migration guide",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 21:45:41.831",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eThe Minimum Weight Spanning Tree algorithm migration guide\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1579455460978_-1737386020",
      "id": "20200119-173740_1158731147",
      "dateCreated": "2020-01-19 17:37:40.978",
      "dateStarted": "2020-02-06 21:45:41.831",
      "dateFinished": "2020-02-06 21:45:41.851",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Example graph\n\nWe can visualize the example graph in Zeppelin by using the following cypher statement:",
      "user": "anonymous",
      "dateUpdated": "2020-02-08 22:09:16.327",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eExample graph\u003c/h3\u003e\n\u003cp\u003eWe can visualize the example graph in Zeppelin by using the following cypher statement:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581199754424_370215007",
      "id": "20200208-220914_2068962324",
      "dateCreated": "2020-02-08 22:09:14.424",
      "dateStarted": "2020-02-08 22:09:16.327",
      "dateFinished": "2020-02-08 22:09:16.337",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_algo\nMATCH p\u003d(:Place)-[:EROAD]-\u003e(:Place)\nRETURN p;",
      "user": "anonymous",
      "dateUpdated": "2020-02-08 22:09:28.382",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "latitude": "string",
                      "longitude": "string",
                      "population": "string",
                      "distance": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "network": {
                  "properties": {
                    "Place": {
                      "selected": "id",
                      "keys": [
                        "latitude",
                        "id",
                        "longitude",
                        "population",
                        "label"
                      ]
                    }
                  },
                  "d3Graph": {
                    "forceLayout": {
                      "timeout": 10000.0,
                      "charge": -120.0,
                      "linkDistance": 80.0
                    },
                    "zoom": {
                      "minScale": 1.3
                    }
                  }
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "editOnDblClick": false,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":20,\"data\":{\"latitude\":52.379189,\"id\":\"Amsterdam\",\"longitude\":52.379189,\"population\":821752},\"label\":\"Place\"},{\"id\":21,\"data\":{\"latitude\":52.092876,\"id\":\"Utrecht\",\"longitude\":52.092876,\"population\":334176},\"label\":\"Place\"},{\"id\":22,\"data\":{\"latitude\":52.078663,\"id\":\"Den Haag\",\"longitude\":52.078663,\"population\":514861},\"label\":\"Place\"},{\"id\":23,\"data\":{\"latitude\":53.61239,\"id\":\"Immingham\",\"longitude\":53.61239,\"population\":9642},\"label\":\"Place\"},{\"id\":24,\"data\":{\"latitude\":53.52285,\"id\":\"Doncaster\",\"longitude\":53.52285,\"population\":302400},\"label\":\"Place\"},{\"id\":25,\"data\":{\"latitude\":51.9775,\"id\":\"Hoek van Holland\",\"longitude\":51.9775,\"population\":9382},\"label\":\"Place\"},{\"id\":26,\"data\":{\"latitude\":51.96375,\"id\":\"Felixstowe\",\"longitude\":51.96375,\"population\":23689},\"label\":\"Place\"},{\"id\":27,\"data\":{\"latitude\":52.05917,\"id\":\"Ipswich\",\"longitude\":52.05917,\"population\":133384},\"label\":\"Place\"},{\"id\":28,\"data\":{\"latitude\":51.88921,\"id\":\"Colchester\",\"longitude\":51.88921,\"population\":104390},\"label\":\"Place\"},{\"id\":29,\"data\":{\"latitude\":51.509865,\"id\":\"London\",\"longitude\":51.509865,\"population\":8787892},\"label\":\"Place\"},{\"id\":30,\"data\":{\"latitude\":51.9225,\"id\":\"Rotterdam\",\"longitude\":51.9225,\"population\":623652},\"label\":\"Place\"},{\"id\":31,\"data\":{\"latitude\":52.01667,\"id\":\"Gouda\",\"longitude\":52.01667,\"population\":70939},\"label\":\"Place\"}],\"edges\":[{\"source\":31,\"target\":21,\"id\":32,\"data\":{\"distance\":35},\"label\":\"EROAD\"},{\"source\":22,\"target\":31,\"id\":33,\"data\":{\"distance\":32},\"label\":\"EROAD\"},{\"source\":25,\"target\":30,\"id\":34,\"data\":{\"distance\":33},\"label\":\"EROAD\"},{\"source\":20,\"target\":21,\"id\":20,\"data\":{\"distance\":46},\"label\":\"EROAD\"},{\"source\":20,\"target\":22,\"id\":21,\"data\":{\"distance\":59},\"label\":\"EROAD\"},{\"source\":22,\"target\":30,\"id\":22,\"data\":{\"distance\":26},\"label\":\"EROAD\"},{\"source\":20,\"target\":23,\"id\":23,\"data\":{\"distance\":369},\"label\":\"EROAD\"},{\"source\":23,\"target\":24,\"id\":24,\"data\":{\"distance\":74},\"label\":\"EROAD\"},{\"source\":24,\"target\":29,\"id\":25,\"data\":{\"distance\":277},\"label\":\"EROAD\"},{\"source\":25,\"target\":22,\"id\":26,\"data\":{\"distance\":27},\"label\":\"EROAD\"},{\"source\":26,\"target\":25,\"id\":27,\"data\":{\"distance\":207},\"label\":\"EROAD\"},{\"source\":27,\"target\":26,\"id\":28,\"data\":{\"distance\":22},\"label\":\"EROAD\"},{\"source\":28,\"target\":27,\"id\":29,\"data\":{\"distance\":32},\"label\":\"EROAD\"},{\"source\":29,\"target\":28,\"id\":30,\"data\":{\"distance\":106},\"label\":\"EROAD\"},{\"source\":31,\"target\":30,\"id\":31,\"data\":{\"distance\":25},\"label\":\"EROAD\"}],\"labels\":{\"Library\":\"#3D4308\",\"Place\":\"#FDF8A5\",\"User\":\"#7F5158\"},\"types\":[\"EROAD\",\"FOLLOWS\",\"DEPENDS_ON\"],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1579455555807_-1128772440",
      "id": "20200119-173915_1773293344",
      "dateCreated": "2020-01-19 17:39:15.807",
      "dateStarted": "2020-02-08 22:09:28.404",
      "dateFinished": "2020-02-08 22:09:28.422",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Neo4j graph algorithms library",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 21:46:19.443",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eNeo4j graph algorithms library\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581025568359_124578976",
      "id": "20200206-214608_725308605",
      "dateCreated": "2020-02-06 21:46:08.359",
      "dateStarted": "2020-02-06 21:46:19.449",
      "dateFinished": "2020-02-06 21:46:19.464",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Write back minimum spanning tree algorithm results\n\nLet’s see the Minimum Spanning Tree algorithm in action. The following query finds\na spanning tree starting from Amsterdam:",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 21:51:42.872",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eWrite back minimum spanning tree algorithm results\u003c/h3\u003e\n\u003cp\u003eLet’s see the Minimum Spanning Tree algorithm in action. The following query finds\u003cbr/\u003ea spanning tree starting from Amsterdam:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1579465505039_-1666082605",
      "id": "20200119-202505_761721492",
      "dateCreated": "2020-01-19 20:25:05.039",
      "dateStarted": "2020-02-06 21:46:24.538",
      "dateFinished": "2020-02-06 21:46:24.544",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_algo\nMATCH (n:Place {id:\"Amsterdam\"})\nCALL algo.spanningTree.minimum(\"Place\", \"EROAD\", \"distance\", id(n),\n  {write:true, writeProperty:\"MINST\"})\nYIELD loadMillis, computeMillis, writeMillis, effectiveNodeCount\nRETURN loadMillis, computeMillis, writeMillis, effectiveNodeCount",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 21:46:31.081",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "markdown",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "loadMillis": "string",
                      "computeMillis": "string",
                      "writeMillis": "string",
                      "effectiveNodeCount": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "loadMillis\tcomputeMillis\twriteMillis\teffectiveNodeCount\n7\t2\t75\t12\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1577905414974_-882443438",
      "id": "20200101-190009_1220471711",
      "dateCreated": "2020-01-01 19:03:34.974",
      "dateStarted": "2020-02-06 21:46:31.092",
      "dateFinished": "2020-02-06 21:46:31.228",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Return results\n\nThe above query stores its results in the graph. If we want to return the minimum weight\nspanning tree we can run the following query:",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 21:52:04.603",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eReturn results\u003c/h3\u003e\n\u003cp\u003eThe above query stores its results in the graph. If we want to return the minimum weight\u003cbr/\u003espanning tree we can run the following query:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1579546736283_512510968",
      "id": "20200120-185856_1085899446",
      "dateCreated": "2020-01-20 18:58:56.283",
      "dateStarted": "2020-02-06 21:46:54.682",
      "dateFinished": "2020-02-06 21:46:54.699",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_algo\nMATCH path \u003d (n:Place {id:\"Amsterdam\"})-[:MINST*]-()\nWITH relationships(path) AS rels\nUNWIND rels AS rel\nWITH DISTINCT rel AS rel\nRETURN startNode(rel).id AS source, endNode(rel).id AS destination, rel.distance AS cost\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 21:46:46.682",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "markdown",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "source": "string",
                      "destination": "string",
                      "cost": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "source\tdestination\tcost\n\"Amsterdam\"\t\"Utrecht\"\t0.0\n\"Utrecht\"\t\"Gouda\"\t0.0\n\"Gouda\"\t\"Rotterdam\"\t0.0\n\"Rotterdam\"\t\"Den Haag\"\t0.0\n\"Den Haag\"\t\"Hoek van Holland\"\t0.0\n\"Hoek van Holland\"\t\"Felixstowe\"\t0.0\n\"Felixstowe\"\t\"Ipswich\"\t0.0\n\"Ipswich\"\t\"Colchester\"\t0.0\n\"Colchester\"\t\"London\"\t0.0\n\"London\"\t\"Doncaster\"\t0.0\n\"Doncaster\"\t\"Immingham\"\t0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1577905414975_757230981",
      "id": "20200101-190028_1585661323",
      "dateCreated": "2020-01-01 19:03:34.975",
      "dateStarted": "2020-02-06 21:46:46.682",
      "dateFinished": "2020-02-06 21:46:46.987",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Neo4j graph data science library",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 21:47:07.410",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eNeo4j graph data science library\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1577905414980_-1530867245",
      "id": "20200101-190304_1101702216",
      "dateCreated": "2020-01-01 19:03:34.980",
      "dateStarted": "2020-02-06 21:47:07.417",
      "dateFinished": "2020-02-06 21:47:07.428",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nPreferred way to use GDS library is with loaded named graphs, where we first load the graph into memory and then proceed to run algorithms on it.\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 21:47:35.275",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003ePreferred way to use GDS library is with loaded named graphs, where we first load the graph into memory and then proceed to run algorithms on it.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581025627398_-237284280",
      "id": "20200206-214707_818926307",
      "dateCreated": "2020-02-06 21:47:07.398",
      "dateStarted": "2020-02-06 21:47:35.275",
      "dateFinished": "2020-02-06 21:47:35.287",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_gds\nCALL gds.graph.create(\u0027spanningtree_example\u0027, \u0027Place\u0027, {EROAD:{type:\u0027EROAD\u0027,projection:\u0027Natural\u0027,properties:\u0027distance\u0027}});",
      "user": "anonymous",
      "dateUpdated": "2020-02-20 07:28:57.401",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "graphName": "string",
                      "nodeProjection.Place.label": "string",
                      "relationshipProjection.EROAD.aggregation": "string",
                      "relationshipProjection.EROAD.projection": "string",
                      "relationshipProjection.EROAD.type": "string",
                      "relationshipProjection.EROAD.properties.distance.property": "string",
                      "relationshipProjection.EROAD.properties.distance.defaultValue": "string",
                      "relationshipProjection.EROAD.properties.distance.aggregation": "string",
                      "nodeCount": "string",
                      "relationshipCount": "string",
                      "createMillis": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "graphName\tnodeProjection.Place.label\trelationshipProjection.EROAD.aggregation\trelationshipProjection.EROAD.projection\trelationshipProjection.EROAD.type\trelationshipProjection.EROAD.properties.distance.property\trelationshipProjection.EROAD.properties.distance.defaultValue\trelationshipProjection.EROAD.properties.distance.aggregation\tnodeCount\trelationshipCount\tcreateMillis\n\"spanningtree_example\"\tPlace\tDEFAULT\tNATURAL\tEROAD\tdistance\tNaN\tDEFAULT\t12\t15\t39\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581025655253_1738926662",
      "id": "20200206-214735_466643794",
      "dateCreated": "2020-02-06 21:47:35.253",
      "dateStarted": "2020-02-20 07:28:57.439",
      "dateFinished": "2020-02-20 07:28:57.499",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Write back minimum spanning tree algorithm results\n\nLet’s see the Minimum Spanning Tree algorithm in action. The following query finds\na spanning tree starting from Amsterdam:",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 21:58:49.299",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eWrite back minimum spanning tree algorithm results\u003c/h3\u003e\n\u003cp\u003eLet’s see the Minimum Spanning Tree algorithm in action. The following query finds\u003cbr/\u003ea spanning tree starting from Amsterdam:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581025917402_-653615492",
      "id": "20200206-215157_973305546",
      "dateCreated": "2020-02-06 21:51:57.402",
      "dateStarted": "2020-02-06 21:58:49.299",
      "dateFinished": "2020-02-06 21:58:49.312",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_gds\nMATCH (n:Place {id:\"Amsterdam\"})\nCALL gds.alpha.spanningTree.minimum.write(\u0027spanningtree_example\u0027, {weightWriteProperty:\u0027distance\u0027, startNodeId: id(n), writeProperty:\u0027MNIST\u0027,relationshipWeightProperty:\u0027distance\u0027})\nYIELD createMillis, computeMillis, writeMillis, effectiveNodeCount\nRETURN createMillis, computeMillis, writeMillis, effectiveNodeCount",
      "user": "anonymous",
      "dateUpdated": "2020-02-20 07:29:00.855",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "createMillis": "string",
                      "computeMillis": "string",
                      "writeMillis": "string",
                      "effectiveNodeCount": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Failed to invoke procedure `gds.alpha.spanningTree.minimum.write`: Caused by: java.lang.ArrayIndexOutOfBoundsException: 30258"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581025688853_798874747",
      "id": "20200206-214808_284803239",
      "dateCreated": "2020-02-06 21:48:08.853",
      "dateStarted": "2020-02-20 07:29:00.876",
      "dateFinished": "2020-02-20 07:29:00.886",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Return results\n\nThe above query stores its results in the graph. If we want to return the minimum weight\nspanning tree we can run the following query:",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 21:52:13.816",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eReturn results\u003c/h3\u003e\n\u003cp\u003eThe above query stores its results in the graph. If we want to return the minimum weight\u003cbr/\u003espanning tree we can run the following query:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581025930970_-559997470",
      "id": "20200206-215210_465327188",
      "dateCreated": "2020-02-06 21:52:10.970",
      "dateStarted": "2020-02-06 21:52:13.816",
      "dateFinished": "2020-02-06 21:52:13.821",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_gds\nMATCH path \u003d (n:Place {id:\"Amsterdam\"})-[:MINST*]-()\nWITH relationships(path) AS rels\nUNWIND rels AS rel\nWITH DISTINCT rel AS rel\nRETURN startNode(rel).id AS source, endNode(rel).id AS destination, rel.distance AS cost",
      "user": "anonymous",
      "dateUpdated": "2020-02-20 07:29:08.490",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1581025778151_-742356042",
      "id": "20200206-214938_1721484523",
      "dateCreated": "2020-02-06 21:49:38.151",
      "dateStarted": "2020-02-20 07:29:08.510",
      "dateFinished": "2020-02-20 07:29:08.525",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nAfter we are done with our analyisis we release the graph from memory",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 22:00:00.666",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eAfter we are done with our analyisis we release the graph from memory\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581026283635_-1321492394",
      "id": "20200206-215803_905830260",
      "dateCreated": "2020-02-06 21:58:03.635",
      "dateStarted": "2020-02-06 22:00:00.665",
      "dateFinished": "2020-02-06 22:00:00.671",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_gds\nCALL gds.graph.drop(\u0027spanningtree_example\u0027);",
      "user": "anonymous",
      "dateUpdated": "2020-02-20 07:29:11.175",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "graphName": "string",
                      "nodeProjection.Place.label": "string",
                      "relationshipProjection.EROAD.aggregation": "string",
                      "relationshipProjection.EROAD.projection": "string",
                      "relationshipProjection.EROAD.type": "string",
                      "relationshipProjection.EROAD.properties.distance.property": "string",
                      "relationshipProjection.EROAD.properties.distance.defaultValue": "string",
                      "relationshipProjection.EROAD.properties.distance.aggregation": "string",
                      "nodeQuery": "string",
                      "relationshipQuery": "string",
                      "nodeCount": "string",
                      "relationshipCount": "string",
                      "degreeDistribution.p99": "string",
                      "degreeDistribution.min": "string",
                      "degreeDistribution.max": "string",
                      "degreeDistribution.mean": "string",
                      "degreeDistribution.p90": "string",
                      "degreeDistribution.p50": "string",
                      "degreeDistribution.p999": "string",
                      "degreeDistribution.p95": "string",
                      "degreeDistribution.p75": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "graphName\tnodeProjection.Place.label\trelationshipProjection.EROAD.aggregation\trelationshipProjection.EROAD.projection\trelationshipProjection.EROAD.type\trelationshipProjection.EROAD.properties.distance.property\trelationshipProjection.EROAD.properties.distance.defaultValue\trelationshipProjection.EROAD.properties.distance.aggregation\tnodeQuery\trelationshipQuery\tnodeCount\trelationshipCount\tdegreeDistribution.p99\tdegreeDistribution.min\tdegreeDistribution.max\tdegreeDistribution.mean\tdegreeDistribution.p90\tdegreeDistribution.p50\tdegreeDistribution.p999\tdegreeDistribution.p95\tdegreeDistribution.p75\n\"spanningtree_example\"\tPlace\tDEFAULT\tNATURAL\tEROAD\tdistance\tNaN\tDEFAULT\tNULL\tNULL\t12\t15\t3\t0\t3\t1.25\t2\t1\t3\t2\t2\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581026289441_933162842",
      "id": "20200206-215809_726587180",
      "dateCreated": "2020-02-06 21:58:09.441",
      "dateStarted": "2020-02-20 07:29:11.206",
      "dateFinished": "2020-02-20 07:29:11.234",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j_gdn\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-06 21:58:28.833",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581026308832_-1281847380",
      "id": "20200206-215828_1960728630",
      "dateCreated": "2020-02-06 21:58:28.832",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Path finding/Spanning tree/Neo4j",
  "id": "2EYQ66NNH",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "neo4j_algo:shared_process": [],
    "md:shared_process": [],
    "neo4j_gds:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}